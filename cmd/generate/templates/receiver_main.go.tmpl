package main

import (
	"context"
	"log"

	cloudevents "github.com/cloudevents/sdk-go"
	"knative.dev/eventing-contrib/pkg/kncloudevents"
)

// {{.TypeComment}}
type {{.GoType}} struct {
  {{range .StructFields}} {{.Name}} {{.FieldType}} {{.Tags}}
  {{end}}
}

func receiveEventTypeEvent(id, source, subject, eventType string, event *{{.GoType}}) error {
  log.Printf("Received event of type %s with content %v", eventType, event)
  // TODO(you) Do something to handle the event.
	return nil
}

// Below here - most of this would not be there.

func handleEvent(event cloudevents.Event, resp *cloudevents.EventResponse) error {
	id := event.ID()
	source := event.Source()
	subject := event.Subject()
	eventType := event.Type()

	var data = &{{.GoType}}{}
  err := event.DataAs(data)
	if err != nil {
		log.Printf("Error decoding event: %v", err)
	}

	err = receiveEventTypeEvent(id, source, subject, eventType, data)
	if err != nil {
		log.Printf("Error handling event: %v", err)
	}

	return err
}

func main() {
	c, err := kncloudevents.NewDefaultClient()
	if err != nil {
		log.Fatal("Failed to create client, ", err)
	}

	log.Fatal(c.StartReceiver(context.Background(), handleEvent))
}
