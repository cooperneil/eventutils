package main

import (
	"context"
	"fmt"
	"log"
	"time"

	cloudevents "github.com/cloudevents/sdk-go"
	"knative.dev/eventing-contrib/pkg/kncloudevents"
)

// {{.TypeComment}}
type {{.GoType}} struct {
  {{range .StructFields}} {{.Name}} {{.FieldType}} {{.Tags}}
  {{end}}
}

const ceType = "{{.cetype}}"
const ceSource = "{{.cesource}}"
const broker = "{{.target}}"
const schema = "{{.schema}}"


func sendEvent(c cloudevents.Client, data *{{.GoType}}, id string) {
	ctx := cloudevents.ContextWithTarget(context.Background(), broker)

	event := cloudevents.NewEvent(cloudevents.VersionV1)
	event.SetType(ceType)
	event.SetSource(ceSource)
	event.SetID(id)
	event.SetDataContentType("application/json")
	event.SetDataSchema(schema)
	event.Data = data
  log.Printf("Sending event: %v", event)
	c.Send(ctx, event)
}

func main() {
	c, err := kncloudevents.NewDefaultClient()
	if err != nil {
		log.Fatal("Failed to create client, ", err)
	}

	event := &{{.GoType}}{}
	id := fmt.Sprint("%d", time.Now().UnixNano())
  // BEGIN HERE - fill in content of {{.GoType}}

  // END HERE
	sendEvent(c, event, id)
}
